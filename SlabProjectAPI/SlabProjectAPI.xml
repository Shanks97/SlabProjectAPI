<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SlabProjectAPI</name>
    </assembly>
    <members>
        <member name="M:SlabProjectAPI.Controllers.AuthController.Register(SlabProjectAPI.Domain.Requests.UserRegistrationRequest)">
            <summary>
            Admin can register new users as Operator User
            </summary>
            <param name="user">The user's email</param>
            <returns></returns>
        </member>
        <member name="M:SlabProjectAPI.Controllers.AuthController.Login(SlabProjectAPI.Domain.Requests.UserLoginRequest)">
            <summary>
            Anonymous User Login
            </summary>
            <param name="user">Model to request the Login</param>
            <returns></returns>
        </member>
        <member name="M:SlabProjectAPI.Controllers.AuthController.SwitchEnableStatusForOperator(System.String)">
            <summary>
            Admin can disable/enable the login for an Operator User by using the respective email
            </summary>
            <param name="email">Operator's email</param>
            <returns></returns>
        </member>
        <member name="M:SlabProjectAPI.Controllers.ProjectController.CreateProject(SlabProjectAPI.Domain.Requests.CreateProjectRequest)">
            <summary>
            Create a project based on the model
            </summary>
            <param name="model">Project creation model</param>
            <returns></returns>
        </member>
        <member name="M:SlabProjectAPI.Controllers.ProjectController.CreateProjectTask(SlabProjectAPI.Domain.Requests.CreateTaskRequest)">
            <summary>
            Create a Task for a project using the project ID
            </summary>
            <param name="model">Project Task creation model</param>
            <returns></returns>
        </member>
        <member name="M:SlabProjectAPI.Controllers.ProjectController.GetProjectById(System.Int32)">
            <summary>
            Get a project based on its Id
            </summary>
            <param name="id">Project's id to find</param>
            <returns></returns>
        </member>
        <member name="M:SlabProjectAPI.Controllers.ProjectController.GetTaskById(System.Int32)">
            <summary>
            Get a task based on its Id
            </summary>
            <param name="id">Task's id to find</param>
            <returns></returns>
        </member>
        <member name="M:SlabProjectAPI.Controllers.ProjectController.GetProjects">
            <summary>
            Get all projects information
            </summary>
            <returns></returns>
        </member>
        <member name="M:SlabProjectAPI.Controllers.ProjectController.GetTasks">
            <summary>
            Get all Tasks information
            </summary>
            <returns></returns>
        </member>
        <member name="M:SlabProjectAPI.Controllers.ProjectController.UpdateProject(System.Int32,SlabProjectAPI.Domain.Requests.EditProjectRequest)">
            <summary>
            Update a project based on the edit model
            </summary>
            <param name="model">Model for edit a project, all properties are optional, except Project's Id</param>
            <returns></returns>
        </member>
        <member name="M:SlabProjectAPI.Controllers.ProjectController.UpdateTask(System.Int32,SlabProjectAPI.Domain.Requests.EditTaskRequest)">
            <summary>
            Update a task based on the edit model
            </summary>
            <param name="model">Model for edit a task, all properties are optional, except task's Id</param>
            <returns></returns>
        </member>
        <member name="M:SlabProjectAPI.Controllers.ProjectController.CompleteProject(System.Int32)">
            <summary>
            Complete a project if all of its Tasks are already executed
            </summary>
            <param name="id">Project's Id</param>
            <returns></returns>
        </member>
        <member name="M:SlabProjectAPI.Controllers.ProjectController.CompleteProjectTask(System.Int32)">
            <summary>
            Complete a task
            </summary>
            <param name="id">Project's Id</param>
            <returns></returns>
        </member>
        <member name="M:SlabProjectAPI.Controllers.ProjectController.DeleteProject(System.Int32)">
            <summary>
            Delete a project based on its Id
            </summary>
            <param name="id">Project's Id to delete</param>
            <returns></returns>
        </member>
        <member name="M:SlabProjectAPI.Controllers.ProjectController.DeleteProjectTask(System.Int32)">
            <summary>
            Delete a task based on its Id
            </summary>
            <param name="id">Task's Id to delete</param>
            <returns></returns>
        </member>
        <member name="M:SlabProjectAPI.Services.Interfaces.IEmailService.SendEmailUserCreated(System.String,System.String)">
            <summary>
            Send email to the new user
            </summary>
            <param name="email">New user email</param>
            <param name="password">New user password</param>
        </member>
        <member name="M:SlabProjectAPI.Services.Interfaces.IEmailService.SendEmailProjectCompleted(System.String,SlabProjectAPI.Models.Project)">
            <summary>
            Send email about the project that has been completed
            </summary>
            <param name="email"></param>
            <param name="project"></param>
        </member>
    </members>
</doc>
